// 抽象产品
abstract class Human {
    public abstract void eat();
    public abstract void sleep();
    public abstract void beat();
}

// 具体产品-男人
class Man extends Human{
    public void eat() {
        System.out.println("Man can eat.");        
    }

    public void sleep() {
        System.out.println("Man can sleep.");
    }

    public void beat() {
        System.out.println("Man can beat doudou.");        
    }

}

// 具体产品-女人
class Female extends Human{

    public void eat() {
        System.out.println("Female can eat.");   
    }

    public void sleep() {
        System.out.println("Female can sleep.");
    }

    public void beat() {
        System.out.println("Female can beat doudou.");        
    }

}

// 简单工厂
public class HumanFactory {
    public static Human createHuman(String gender){
        Human human = null;
        if( gender.equals("man") ){
            human = new Man();
        }else if( gender.equals("female")){
            human = new Female();
        }

        return human;
    }
}

// 女娲造人
public class Goddess {  
    public static void main(String[] args) throws IOException {  
        // 造个男人  
        Human human = HumanFactory.createHuman("man");  
        human.eat();
        human.sleep();
        human.beat();
    } 
}

工厂方法模式在简单工厂模式的基础之上，把简单工厂抽象化了。
// 简单工厂变为了抽象工厂
abstract class HumanFactory {
    public abstract Human createHuman(String gender) throws IOException;
}

// 具体工厂（每个具体工厂负责一个具体产品）  
class ManFactory extends HumanFactory{  
    public Human createHuman(String gender) throws IOException {  
        return new Man();  
    }  
}  
class FemaleFactory extends HumanFactory{  
    public Human createHuman(String gender) throws IOException {  
        return new Female();  
    }  
}  
